@charset "UTF-8";
@import 'common/var';
@import 'mixins/button';
@import 'mixins/mixins';
@import 'mixins/utils';

// Düğme tiplerini ve karşılık gelen renkleri içeren bir liste
$button-colors: ('default', 'primary', 'secondary', 'gray', 'light', 'success', 'danger', 'info', 'warning');

// Derin bir map yapısından değer almak için yardımcı bir fonksiyon
@function map-get-deep($map, $keys...) {
  $in-map: $map;
  @each $key in $keys {
    $in-map: map-get($in-map, $key);
    @if $in-map == null {
      @return null;
    }
  }
  @return $in-map;
}

%button {
  display: inline-flex;
  align-items: center;
  gap: $custom-button-icon-gap;
  line-height: 1;
  white-space: nowrap;
  cursor: pointer;
  background: $--button-default-background-color;
  border-width: 1px;
  border-style: solid;
  // border: $--border-base;
  border-color: $--button-default-border-color;
  color: $--button-default-font-color;
  -webkit-appearance: none;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  margin: 0;
  transition: 0.1s;
  font-weight: $--button-font-weight;
  @include utils-user-select(none);

  @extend .el-button--primary;

  @include button-size($--button-padding-vertical, $--button-padding-horizontal, $--button-font-size, $--button-border-radius);

  &.el-button--text {
    text-decoration: underline;
    border-color: transparent;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  @include when(plain) {
    &:hover,
    &:focus {
      background: $--color-white;
      border-color: $--color-primary;
      color: $--color-primary;
    }

    &:active {
      background: $--color-white;
      border-color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
      color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
      outline: none;
    }
  }

  @include when(active) {
    color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
    border-color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
  }

  @include when(loading) {
    position: relative;
    pointer-events: none;

    &:before {
      pointer-events: none;
      content: '';
      position: absolute;
      left: -1px;
      top: -1px;
      right: -1px;
      bottom: -1px;
      border-radius: inherit;
      background-color: rgba(255, 255, 255, 0.35);
    }
  }
  @include when(round) {
    border-radius: 20px;
    padding: 12px 23px;
  }
  @include when(circle) {
    border-radius: 50%;
    padding: $--button-padding-vertical;
  }

  // Her düğme tipi ve durumu için özel renk değerlerin tanımı
  $button-variant-values: (
    'primary': (
      'default': 700,
      'hover': 500,
      'active': 900 // 'disabled' tanımlanmadı, mixin'in varsayılanı kullanılacak,,,,
    ),
    'light': (
      'default': 700,
      'hover': 500,
      'active': 900,
    ),
  );

  // Her düğme tipi için mixin'i çağırın
  @each $color in $button-colors {
    // Her bir durum için varsayılan değerleri ayarlayın
    $default: map-get-deep($button-variant-values, $color, 'default') or 500;
    $hover: map-get-deep($button-variant-values, $color, 'hover') or 400;
    $active: map-get-deep($button-variant-values, $color, 'active') or 600;
    $disabled: map-get-deep($button-variant-values, $color, 'disabled') or 200;

    @include m(#{$color}) {
      @include button-variant($color, $default, $hover, $active, $disabled);
    }

    @include m(text) {
      &.#{$color} {
        @include button-plain($color, $default, $hover, $active, $disabled);
      }
    }
  }

  @include m(large) {
    @include button-size(
      $--button-large-padding-vertical,
      $--button-large-padding-horizontal,
      $--button-large-font-size,
      $--button-large-border-radius
    );
    @include when(circle) {
      padding: $--button-large-padding-vertical;
    }
  }
  @include m(small) {
    @include button-size(
      $--button-small-padding-vertical,
      $--button-small-padding-horizontal,
      $--button-small-font-size,
      $--button-small-border-radius
    );
    @include when(circle) {
      padding: $--button-small-padding-vertical;
    }
  }
  @include m(mini) {
    @include button-size($--button-mini-padding-vertical, $--button-mini-padding-horizontal, $--button-mini-font-size, $--button-mini-border-radius);
    @include when(circle) {
      padding: $--button-mini-padding-vertical;
    }
  }
}

@include b(button) {
  display: inline-flex;
  align-items: center;
  gap: $custom-button-icon-gap;
  line-height: 1;
  white-space: nowrap;
  cursor: pointer;
  background: $--button-default-background-color;
  border-width: 1px;
  border-style: solid;
  // border: $--border-base;
  border-color: $--button-default-border-color;
  color: $--button-default-font-color;
  -webkit-appearance: none;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  margin: 0;
  transition: 0.1s;
  font-weight: $--button-font-weight;
  @include utils-user-select(none);

  @extend .el-button--primary;

  @include button-size($--button-padding-vertical, $--button-padding-horizontal, $--button-font-size, $--button-border-radius);

  &.el-button--text {
    text-decoration: underline;
    border-color: transparent;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  @include when(plain) {
    &:hover,
    &:focus {
      background: $--color-white;
      border-color: $--color-primary;
      color: $--color-primary;
    }

    &:active {
      background: $--color-white;
      border-color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
      color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
      outline: none;
    }
  }

  @include when(active) {
    color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
    border-color: mix($--color-black, $--color-primary, $--button-active-shade-percent);
  }

  @include when(loading) {
    position: relative;
    pointer-events: none;

    &:before {
      pointer-events: none;
      content: '';
      position: absolute;
      left: -1px;
      top: -1px;
      right: -1px;
      bottom: -1px;
      border-radius: inherit;
      background-color: rgba(255, 255, 255, 0.35);
    }
  }
  @include when(round) {
    border-radius: 20px;
    padding: 12px 23px;
  }
  @include when(circle) {
    border-radius: 50%;
    padding: $--button-padding-vertical;
  }

  // Her düğme tipi ve durumu için özel renk değerlerin tanımı
  $button-variant-values: (
    'default': (
      'default': 700,
      'hover': 500,
      'active': 900 // 'disabled' tanımlanmadı, mixin'in varsayılanı kullanılacak,,,,
    ),
    'primary': (
      'default': 700,
      'hover': 500,
      'active': 900 // 'disabled' tanımlanmadı, mixin'in varsayılanı kullanılacak,,,,
    ),
    'light': (
      'default': 700,
      'hover': 500,
      'active': 900,
    ),
  );

  @each $color in $button-colors {
    // $new-color: if($color == 'default', 'primary', $color);
    $default: map-get-deep($button-variant-values, $color, 'default') or 500;
    $hover: map-get-deep($button-variant-values, $color, 'hover') or 400;
    $active: map-get-deep($button-variant-values, $color, 'active') or 600;
    $disabled: map-get-deep($button-variant-values, $color, 'disabled') or 200;

    @include m(#{$color}) {
      @include button-variant($color, $default, $hover, $active, $disabled);
    }

    @include m(text) {
      &.#{$color} {
        @include button-plain($color, $default, $hover, $active, $disabled);
      }
    }
  }

  @include m(large) {
    @include button-size(
      $--button-large-padding-vertical,
      $--button-large-padding-horizontal,
      $--button-large-font-size,
      $--button-large-border-radius
    );
    @include when(circle) {
      padding: $--button-large-padding-vertical;
    }
  }
  @include m(medium) {
    @include button-size(
      $--button-medium-padding-vertical,
      $--button-medium-padding-horizontal,
      $--button-medium-font-size,
      $--button-medium-border-radius
    );
    @include when(circle) {
      padding: $--button-large-padding-vertical;
    }
  }
  @include m(small) {
    @include button-size(
      $--button-small-padding-vertical,
      $--button-small-padding-horizontal,
      $--button-small-font-size,
      $--button-small-border-radius
    );
    @include when(circle) {
      padding: $--button-small-padding-vertical;
    }
  }
  @include m(mini) {
    @include button-size($--button-mini-padding-vertical, $--button-mini-padding-horizontal, $--button-mini-font-size, $--button-mini-border-radius);
    @include when(circle) {
      padding: $--button-mini-padding-vertical;
    }
  }
}

@include b(button-group) {
  @include utils-clearfix;
  display: inline-block;
  vertical-align: middle;

  & > .el-button {
    float: left;
    position: relative;
    & + .el-button {
      margin-left: 0;
    }
    &.is-disabled {
      z-index: 1;
    }
    &:first-child {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    &:last-child {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    &:first-child:last-child {
      border-top-right-radius: $--button-border-radius;
      border-bottom-right-radius: $--button-border-radius;
      border-top-left-radius: $--button-border-radius;
      border-bottom-left-radius: $--button-border-radius;

      &.is-round {
        border-radius: 20px;
      }

      &.is-circle {
        border-radius: 50%;
      }
    }
    &:not(:first-child):not(:last-child) {
      border-radius: 0;
    }
    &:not(:last-child) {
      margin-right: -1px;
    }

    &:not(.is-disabled) {
      &:hover,
      &:focus,
      &:active {
        z-index: 1;
      }
    }

    @include when(active) {
      z-index: 1;
    }
  }

  & > .el-dropdown {
    & > .el-button {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      border-left-color: rgba($--color-white, 0.5);
    }
  }

  @each $color in $button-colors {
    .el-button--#{$color} {
      &:first-child {
        border-right-color: var(--#{$color}-400); // rgba($--color-white, 0.12);
      }
      &:last-child {
        border-left-color: var(--#{$color}-400); // rgba($--color-white, 0.12);
      }
      &:not(:first-child):not(:last-child) {
        border-left-color: var(--#{$color}-400); // rgba($--color-white, 0.12);
        border-right-color: var(--#{$color}-400); // rgba($--color-white, 0.12);
      }
    }
  }
}

.el-button:not(:has(> span:not(:empty))) {
  padding: $--button-large-padding-vertical;

  &.el-button--large {
    padding: $--button-large-padding-vertical;
  }

  &.el-button--medium {
    padding: $--button-medium-padding-vertical;
  }

  &.el-button--small {
    padding: $--button-small-padding-vertical;
  }

  &.el-button--mini {
    padding: $--button-mini-padding-vertical;
  }
}

.el-icon-right:before {
  margin-left: $custom-button-icon-gap;
}
